from loadData import Storage
from fastapi import FastAPI
from connectDB import connectPooledDB
# For Connection URL To MySQL Database

app = FastAPI()
db = connectPooledDB()
db.close()
st = Storage()
# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.on_event("startup")
def startup():
    pass

# This hook ensures that the connection is closed when we've finished
# processing the request.
# @app.on_event("shutdown")
# def shutdown():
#     if not db.is_closed():
#         db.close()
@app.get("/")
def read_root():
    return {"hello": "world"}

# $ Websites 
@app.get("/cnt/")
def read_table_cnt():
    return st.fetchCounts()

@app.get("/test/")
def test():
    pass

# Select top 10 rows of tweetData table
@app.get("/db/")
def read_db():
    return {"Hello":"world"}

@app.get("/insertAll/")
def insert_all():
    st.loadAllData()

@app.get("/deleteAll/")
def delete_all():
    st.resetDB()
    return read_table_cnt()

# Update specified tweet 'like' count by specified amount
# @app.get("/update/{add_likes}/{tw_id}")
# def read_item(add_likes: int, tw_id: str = "1118876219381026818"):
#     bfore = db.execute_sql("select likes from tweetData where tweet_id = '{}'".format(tw_id))
#     update_cursor = db.execute_sql("update tweetData set likes = likes + {} where tweet_id like {}".format(add_likes, tw_id))
#     after = db.execute_sql("select likes from tweetData where tweet_id = '{}'".format(tw_id))
#     after = after.fetchall()
#     bfore = bfore.fetchall()
#     return {"before Likes were": bfore, "after likes are": after}

